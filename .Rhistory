unique(data_train$marital.status)
})
})
temp <- data_train2[,list("nr_of_ppl" = length(ID)),
by = list("age" = age)]
ggplot(temp, aes(x = age,y = nr_of_ppl))+geom_point()
source('shiny_app.R')
source('shiny_app.R')
source('shiny_app.R')
source('shiny_app.R')
runApp('shiny_app')
runApp('shiny_app')
prep_data <- data_train[,list("nr_of_ppl" = length(ID)),
by = list("age" = age,
marital.stats == " Divorced")]
prep_data <- data_train[,list("nr_of_ppl" = length(ID)),
by = list("age" = age,
marital.status == " Divorced")]
prep_data
prep_data <- data_train[,list("nr_of_ppl" = length(ID)),
by = list("age" = age,
(marital.status == " Divorced") == TRUE,)]
prep_data
prep_data <- data_train[,list("nr_of_ppl" = length(ID)),
by = list("age" = age,
(marital.status == " Divorced") == TRUE)]
prep_data
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
data_train$marital.status
as.character(data_train$marital.status)
gsub(" ","",as.character(data_train$marital.status))
as.factor(gsub(" ","",as.character(data_train$marital.status)))
data_train$marital.status <- as.factor(gsub(" ","",as.character(data_train$marital.status)))
runApp('shiny_app')
levels(data_train$marital.status)
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
input
input <- NA
input$marital.status
input$marital.status <- "Divorced"
input <- data.frame()
input$marital.status <- "Divorced"
runApp('shiny_app')
runApp('shiny_app')
data_train$marital.status == ""
unique(data_train$marital.status)
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- as.data.table(read.csv2("data_train.csv"))
data_train$ID <- 1:nrow(data_train)
data_train$marital.status <- as.factor(gsub(" ","",as.character(data_train$marital.status)))
unique(data_train$marital.status)
runApp('shiny_app')
runApp('shiny_app')
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- as.data.table(read.csv2("data_train.csv"))
data_train$ID <- 1:nrow(data_train)
data_train$marital.status <- as.factor(gsub(" ","",as.character(data_train$marital.status)))
unique(data_train$marital.status)
levels(data_train$marital.status)
levels(data_train$marital.status)[""]
levels(data_train$marital.status)[levels(data_train$marital.status) == ""]
levels(data_train$marital.status)[levels(data_train$marital.status) == ""] <- "Missing data"
levels(data_train$marital.status)
runApp('shiny_app')
runApp('shiny_app')
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- as.data.table(read.csv2("data_train.csv"))
#Adding a column with IDs to the data
data_train$ID <- 1:nrow(data_train)
data_train$marital.status <- as.factor(gsub(" ","",as.character(data_train$marital.status)))
levels(data_train$marital.status)[levels(data_train$marital.status) == ""] <- "Missing data"
levels(data_train$marital.status)
runApp('shiny_app')
#### Shiny application to show the distribution of age by marital-status ####
data_train$marital.status
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
runApp('shiny_app')
levels(data_train$marital.status)
levels(data_train$marital.status) <- c("Please choose a marital status",levels(data_train$marital.status))
levels(data_train$marital.status)
#### Shiny application to show the distribution of age by marital-status ####
unique(data_train$marital.status)
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- as.data.table(read.csv2("data_train.csv"))
#Adding a column with IDs to the data
data_train$ID <- 1:nrow(data_train)
data_train$marital.status <- as.factor(gsub(" ","",as.character(data_train$marital.status)))
levels(data_train$marital.status)[levels(data_train$marital.status) == ""] <- "Missing data"
levels(data_train$marital.status)
#Changing the order of the levels not to show the "Missing data" first
levels(data_train$marital.status) <- levels(data_train$marital.status)[c(2:length(levels(data_train$marital.status)),1)]
levels(data_train$marital.status)
#### Shiny application to show the distribution of age by marital-status ####
unique(data_train$marital.status)
runApp('shiny_app')
library(shiny)
library(ggplot2)
library(data.table)
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- as.data.table(read.csv2("data_train.csv"))
#Adding a column with IDs to the data
data_train$ID <- 1:nrow(data_train)
#Correcting data quality issues
data_train$marital.status <- as.factor(gsub(" ","",as.character(data_train$marital.status)))
levels(data_train$marital.status)[levels(data_train$marital.status) == ""] <- "Missing data"
factor(data_train$marital.status)
#Changing the order of the levels not to show the "Missing data" first
data_train$marital.status <- factor(data_train$marital.status,levels(data_train$marital.status)[c(2:length(levels(data_train$marital.status)),1)])
runApp('shiny_app')
runApp('shiny_app')
#filtering the data for the plot according to the selected marital.status
data_train2 <- data_train[data_train$marital.status == "Divorced"]
#Creating a pivot-like table for plotting
prep_data <- data_train2[,list("nr_of_ppl" = length(ID)),
by = list("age" = age)]
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl)) +
geom_histogram() + labs(x = "Age", y = "Number of the people")
print(dist)
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl)) +
geom_histogram() + labs(x = "Age")
print(dist)
#filtering the data for the plot according to the selected marital.status
data_train2 <- data_train[data_train$marital.status == "Divorced"] #input$marital.status]
#Creating a pivot-like table for plotting
prep_data <- data_train2[,list("nr_of_ppl" = length(ID)),
by = list("age" = age)]
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl)) +
geom_histogram(nr_of_ppl) + labs(x = "Age", y = "Number of the people")
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl)) +
geom_histogram(aes(x = age,y = nr_of_ppl)) + labs(x = "Age", y = "Number of the people")
print(dist)
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data ) +
geom_histogram(aes(x = age,y = nr_of_ppl)) + labs(x = "Age", y = "Number of the people")
print(dist)
#Creating the graph based on the pivot-like table
dist <- ggplot() +
geom_histogram(prep_data,aes(x = age,y = nr_of_ppl)) + labs(x = "Age", y = "Number of the people")
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl), geom = "histogram") +
labs(x = "Age", y = "Number of the people")
print(dist)
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age), geom = "histogram") +
labs(x = "Age", y = "Number of the people")
print(dist)
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl), geom = "histogram") +
geom_histogram() + labs(x = "Age", y = "Number of the people")
print(dist)
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl)) +
geom_histogram(stat ="identity") + labs(x = "Age", y = "Number of the people")
print(dist)
runApp('shiny_app')
unique(data_train$marital.status)
runApp('shiny_app')
data_train2 <- data_train[data_train$marital.status == ]
unique(data_train$marital.status)
data_train2 <- data_train[data_train$marital.status == "Married-AF-spouse"]
data_train2
#Creating a pivot-like table for plotting
prep_data <- data_train2[,list("nr_of_ppl" = length(ID)),
by = list("age" = age)]
View(prep_data)
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl)) +
geom_histogram(stat ="identity") + labs(x = "Age", y = "Number of the people")
print(dist)
View(prep_data)
runApp('shiny_app')
sapply(data_train, typeof())
?typeof
sapply(data_train, function() typeof())
sapply(data_train, function(x) typeof(x))
head(data_train)
# We can notice, that all variables are integers, however by looking at the dataset we can clearly see, that it is not true
data_train$marital.status
# We can notice, that all variables are integers, however by looking at the dataset we can clearly see, that it is not true
typeof(data_train$marital.status)
# We can notice, that all variables are integers, however by looking at the dataset we can clearly see, that it is not true
is.factor(data_train$marital.status)
# We can notice, that all variables are integers, however by looking at the dataset we can clearly see, that it is not true
is.integer(data_train$marital.status)
# Check the type of the columns
sapply(data_train, class)
i <- 1
class(data_train[,i])
data_train[,i]
#### Analyzing a dataset ####
# Loading the needed library/ies
library(ggplot2)
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- read.csv2("data_train.csv")
data_train[,i]
class(data_train[,i])
data_train[,i][is.na(data_train[,i])]
# Let's deal with the NA-s. One possibility is to set the values of NA 0 if the variable is integer type and
# define a new factor, "No values", if the variable is a factor.
for(i in 1:nrow(data_train)){
if(class(data_train[,i]) == "factor"){
data_train[,i][is.na(data_train[,i])] <- "No values"
} else {
data_train[,i][is.na(data_train[,i])] <- 0
}
}
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- read.csv2("data_train.csv")
# Check the type of the columns
sapply(data_train, class)
# Let's deal with the NA-s. One possibility is to set the values of NA 0 if the variable is integer type and
# define a new factor, "No values", if the variable is a factor.
for(i in 1:ncol(data_train)){
if(class(data_train[,i]) == "factor"){
data_train[,i][is.na(data_train[,i])] <- "No values"
} else {
data_train[,i][is.na(data_train[,i])] <- 0
}
}
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- read.csv2("data_train.csv")
# Check the type of the columns
sapply(data_train, class)
i <- 2
class(data_train[,i]) == "factor"
data_train[,i][is.na(data_train[,i])]
data_test <- read.csv2("data_test.csv")
data_all <- rbind(data_train,data_test)
colnames(data_test)
colnames(data_train)
data_test <- read.csv2("data_test.csv")
colnames(data_test)
data_test <- read.csv2("data_test.csv")
colnames(data_test)
data_test <- read.csv2("data_test.csv")
colnames(data_test)
rm(data_test)
data_test <- read.csv2("data_test.csv")
colnames(data_test)
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- read.csv2("data_train.csv")
colnames(data_train)
data_test <- read.csv2("data_test.csv")
colnames(data_test)
rm(list=ls())
#### Analyzing a dataset ####
# Loading the needed library/ies
library(ggplot2)
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- read.csv2("data_train.csv")
library(data.table)
data_train <- as.data.table(read.csv2("data_train.csv"))
colnames(data_train)
data_test <- read.csv2("data_test.csv")
colnames(data_test)
colnames(data_test) <- colnames(data_train)
data_all <- rbind(data_train,data_test)
# Check the type of the columns
sapply(data_all, class)
# Check the type of the columns
sapply(data_all, class)
# But firstly, let check if there is an NA at all in the dataset
NAs <- c()
for(i in 1:ncol(data_train)){
NAs <- c(NAs,any(is.na(data_train[,i])))
}
NAs
# But firstly, let check if there is an NA at all in the dataset
NAs <- c()
for(i in 1:ncol(data_all)){
NAs <- c(NAs,any(is.na(data_all[,i])))
}
ncol(data_all)
i <- 1
NAs <- c(NAs,any(is.na(data_all[,i])))
for(i in 1:ncol(data_all)){
i <- 1
NAs <- c(NAs,any(is.na(data_all[,i])))
}
data_train <- as.data.table(read.csv2("data_train.csv"))
colnames(data_train)
data_test <- as.data.table(read.csv2("data_test.csv"))
colnames(data_test) <- colnames(data_train)
#loading both test and training data to make sure, that the same modifications are made also on the test data
data_all <- rbind(data_train,data_test)
# Check the type of the columns
sapply(data_all, class)
# But firstly, let check if there is an NA at all in the dataset
NAs <- c()
for(i in 1:ncol(data_all)){
NAs <- c(NAs,any(is.na(data_all[,i])))
}
data_all[,i]
data_all[i]
data_all[i,]
data_all[,1]
data_all[,i]
data_train <- data.frame(read.csv2("data_train.csv"))
colnames(data_train)
data_test <- data.frame(read.csv2("data_test.csv"))
colnames(data_test) <- colnames(data_train)
data_train <- data.frame(read.csv2("data_train.csv"))
colnames(data_train)
data_test <- data.frame(read.csv2("data_test.csv"))
colnames(data_test) <- colnames(data_train)
#loading both test and training data to make sure, that the same modifications are made also on the test data
data_all <- rbind(data_train,data_test)
# Check the type of the columns
sapply(data_all, class)
# But firstly, let check if there is an NA at all in the dataset
NAs <- c()
for(i in 1:ncol(data_all)){
NAs <- c(NAs,any(is.na(data_all[,i])))
}
NAs
for(i in 1:ncol(data_train)){
if(class(data_train[,i]) == "factor"){
data_train[,i][is.na(data_train[,i])] <- "No values"
} else {
data_train[,i][is.na(data_train[,i])] <- 0
}
}
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- data.frame(read.csv2("data_train.csv"))
colnames(data_train)
data_test <- data.frame(read.csv2("data_test.csv"))
colnames(data_test) <- colnames(data_train)
#loading both test and training data to make sure, that the same modifications are made also on the test data
data_all <- rbind(data_train,data_test)
#### Data exploration ####
# Check the type of the columns
sapply(data_all, class)
# We can notice, that there are many variables which are categorical. For them we will use dummies in the model.
# (Thanks to the design of the R-s lm() function, if it recognizes that it has to deal with a factor variable,
# generates automatically dummies. More about that later.
# Let's deal with the NA-s.
# Firstly, let check if there is an NA at all in the dataset
NAs <- c()
for(i in 1:ncol(data_all)){
NAs <- c(NAs,any(is.na(data_all[,i])))
}
NAs
# Ok, there are some NA. One possibility is to set the values of NA 0 if the variable is integer type and
# define a new factor, "No values", if the variable is a factor.
for(i in 1:ncol(data_train)){
if(class(data_train[,i]) == "factor"){
as.character(data_train[,i][is.na(data_train[,i])]) <- "No values"
data_train[,i] <- as.factor(data_train[,i])
} else {
data_train[,i][is.na(data_train[,i])] <- 0
}
}
i <- 1
i <- 5
as.character(data_train[,i][is.na(data_train[,i])])
data_train[,i][is.na(data_train[,i])]
data_train[,i]
i <- 2
data_train[,i][is.na(data_train[,i])]
as.character(data_train[,i][is.na(data_train[,i])])
data_train[,i][is.na(data_train[,i])]
for(i in 1:ncol(data_train)){
if(length(data_train[,i][is.na(data_train[,i])]) != 0){
if(class(data_train[,i]) == "factor"){
as.character(data_train[,i][is.na(data_train[,i])]) <- "No values"
data_train[,i] <- as.factor(data_train[,i])
} else {
data_train[,i][is.na(data_train[,i])] <- 0
}
}
}
# Firstly, let check if there is an NA at all in the dataset
NAs <- c()
for(i in 1:ncol(data_all)){
NAs <- c(NAs,any(is.na(data_all[,i])))
}
NAs
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- data.frame(read.csv2("data_train.csv"))
colnames(data_train)
data_test <- data.frame(read.csv2("data_test.csv"))
colnames(data_test) <- colnames(data_train)
#loading both test and training data to make sure, that the same modifications are made also on the test data
data_all <- rbind(data_train,data_test)
#### Data exploration ####
# Check the type of the columns
sapply(data_all, class)
# We can notice, that there are many variables which are categorical. For them we will use dummies in the model.
# (Thanks to the design of the R-s lm() function, if it recognizes that it has to deal with a factor variable,
# generates automatically dummies. More about that later.
# Let's deal with the NA-s.
# Firstly, let check if there is an NA at all in the dataset
NAs <- c()
for(i in 1:ncol(data_all)){
NAs <- c(NAs,any(is.na(data_all[,i])))
}
NAs
# Ok, there are some NA. One possibility is to set the values of NA 0 if the variable is integer type and
# define a new factor, "No values", if the variable is a factor.
for(i in 1:ncol(data_all)){
if(length(data_all[,i][is.na(data_all[,i])]) != 0){
if(class(data_all[,i]) == "factor"){
as.character(data_all[,i][is.na(data_all[,i])]) <- "No values"
data_all[,i] <- as.factor(data_all[,i])
} else {
data_all[,i][is.na(data_all[,i])] <- 0
}
}
}
# Firstly, let check if there is an NA at all in the dataset
NAs <- c()
for(i in 1:ncol(data_all)){
NAs <- c(NAs,any(is.na(data_all[,i])))
}
NAs
runApp('shiny_app')
runApp('shiny_app')
runExample("01_Hello")
input$marital.status <- "Divorced"
#filtering the data for the plot according to the selected marital.status
data_train2 <- data_train[data_train$marital.status == input$marital.status]
#filtering the data for the plot according to the selected marital.status
data_train2 <- data_train[data_train$marital.status == "Divorced"]#input$marital.status]
unique(data_train$marital.status)
as.character(data_train$marital.status)
library(shiny)
library(ggplot2)
library(data.table)
#Loading the data
setwd("C:\\Users\\lachi\\Desktop\\application")
data_train <- as.data.table(read.csv2("data_train.csv"))
#Adding a column with IDs to the data
data_train$ID <- 1:nrow(data_train)
#Correcting data quality issues
data_train$marital.status <- as.factor(gsub(" ","",as.character(data_train$marital.status)))
levels(data_train$marital.status)[levels(data_train$marital.status) == ""] <- "Missing data"
#Changing the order of the levels not to show the "Missing data" first
data_train$marital.status <- factor(data_train$marital.status,levels(data_train$marital.status)[c(2:length(levels(data_train$marital.status)),1)])
unique(data_train$marital.status)
as.character(data_train$marital.status)
#filtering the data for the plot according to the selected marital.status
data_train2 <- data_train[as.character(data_train$marital.status) == "Divorced"]#input$marital.status]
#Creating a pivot-like table for plotting
prep_data <- data_train2[,list("nr_of_ppl" = length(ID)),
by = list("age" = age)]
#Creating the graph based on the pivot-like table
dist <- ggplot(prep_data, aes(x = age,y = nr_of_ppl)) +
geom_histogram(stat ="identity") + labs(x = "Age", y = "Number of the people")
print(dist)
View(prep_data)
runApp('shiny_app')
runApp('shiny_app')
# Ok, NAs are eliminated.
# There are two plots which helps very much to get to know the data. Correlation plots and
corr(data_all)
?cor
# Ok, NAs are eliminated.
# There are two plots which helps very much to get to know the data. Correlation plots and
cor(data_all)
# Ok, NAs are eliminated.
# There are two plots which helps very much to get to know the data. Correlation plots and
cor(data_all)
# Ok, NAs are eliminated.
# There are two plots which helps very much to get to know the data. Correlation plots and
cor(as.numeric(data_all))
# Check the type of the columns
sapply(data_all, class)
data_all$workclass
as.numeric(data_all$workclass)
# Ok, NAs are eliminated.
# There are two plots which helps very much to get to know the data. Correlation plots and
as.numeric(data_all)
# Ok, NAs are eliminated.
# There are two plots which helps very much to get to know the data. Correlation plots and
temp <- lapply(data_all,as.numeric)
cor(temp)
# Ok, NAs are eliminated.
# There are two plots which helps very much to get to know the data. Correlation plots and
temp <- sapply(data_all,as.numeric)
cor(temp)
corr(temp)
# Ok, NAs are eliminated.
# There are two plots which helps very much to get to know the data. Correlation plots and
library(corrplot)
corrplot(cor(temp))
plot(data_all)
